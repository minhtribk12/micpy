/* -*- c -*- */
/*
 * vim:syntax=c
 *
 */

#include <numpy/npy_common.h>

#define mpy_degrees mpy_rad2deg
#define mpy_degreesf mpy_rad2degf
#define mpy_degreesl mpy_rad2degl

#define mpy_radians mpy_deg2rad
#define mpy_radiansf mpy_deg2radf
#define mpy_radiansl mpy_deg2radl

//#pragma omp declare target
/**begin repeat
 * #type = npy_float, npy_double, npy_longdouble#
 * #c = f, ,l#
 * #C = F, ,L#
 */

inline @type@ mpy_heaviside@c@(@type@ x, @type@ h0)
{
    if (isnan(x)) {
        return (@type@) MPY_NAN;
    }
    else if (x == 0) {
        return h0;
    }
    else if (x < 0) {
        return (@type@) 0.0;
    }
    else {
        return (@type@) 1.0;
    }
}


#define RAD2DEG  (180.0@c@/NPY_PI@c@)
#define DEG2RAD  (NPY_PI@c@/180.0@c@)

inline @type@ mpy_rad2deg@c@(@type@ x)
{
    return x*RAD2DEG;
}

inline @type@ mpy_deg2rad@c@(@type@ x)
{
    return x*DEG2RAD;
}

#undef RAD2DEG
#undef DEG2RAD

#define LOGE2    NPY_LOGE2@c@
#define LOG2E    NPY_LOG2E@c@

inline @type@ mpy_log2_1p@c@(@type@ x)
{
    return LOG2E*log1p@c@(x);
}

inline @type@ mpy_exp2_m1@c@(@type@ x)
{
    return expm1@c@(LOGE2*x);
}

inline @type@ mpy_logaddexp@c@(@type@ x, @type@ y)
{
    if (x == y) {
        /* Handles infinities of the same sign without warnings */
        return x + LOGE2;
    }
    else {
        const @type@ tmp = x - y;
        if (tmp > 0) {
            return x + mpy_log1p@c@(exp@c@(-tmp));
        }
        else if (tmp <= 0) {
            return y + mpy_log1p@c@(exp@c@(tmp));
        }
        else {
            /* NaNs */
            return tmp;
        }
    }
}

inline @type@ mpy_logaddexp2@c@(@type@ x, @type@ y)
{
    if (x == y) {
        /* Handles infinities of the same sign without warnings */
        return x + 1;
    }
    else {
        const @type@ tmp = x - y;
        if (tmp > 0) {
            return x + mpy_log2_1p@c@(exp2@c@(-tmp));
        }
        else if (tmp <= 0) {
            return y + mpy_log2_1p@c@(exp2@c@(tmp));
        }
        else {
            /* NaNs */
            return tmp;
        }
    }
}

#undef LOGE2
#undef LOG2E

/*
 * Python version of divmod.
 *
 * The implementation is mostly copied from cpython 3.5.
 */
inline @type@
mpy_divmod@c@(@type@ a, @type@ b, @type@ *modulus)
{
    @type@ div, mod, floordiv;

    mod = fmod@c@(a, b);

    if (!b) {
        /* If b == 0, return result of fmod. For IEEE is nan */
        *modulus = mod;
        return mod;
    }

    /* a - mod should be very nearly an integer multiple of b */
    div = (a - mod) / b;

    /* adjust fmod result to conform to Python convention of remainder */
    if (mod) {
        if ((b < 0) != (mod < 0)) {
            mod += b;
            div -= 1.0@c@;
        }
    }
    else {
        /* if mod is zero ensure correct sign */
        mod = (b > 0) ? 0.0@c@ : -0.0@c@;
    }

    /* snap quotient to nearest integral value */
    if (div) {
        floordiv = floor(div);
        if (div - floordiv > 0.5@c@)
            floordiv += 1.0@c@;
    }
    else {
        /* if div is zero ensure correct sign */
        floordiv = (a / b > 0) ?  0.0@c@ : -0.0@c@;
    }

    *modulus = mod;
    return floordiv;
}

/**end repeat**/
//#pragma omp end declare target

